{"version":3,"sources":["index.js"],"names":["squareStyle","boardStyle","containerStyle","instructionsStyle","buttonStyle","Square","value","onClick","style","Board","squares","winner","setBoard","xIsNext","className","id","Array","fill","map","square","i","Game","useState","board","setXIsNext","lines","length","a","b","c","calculateWinner","boardCopy","ReactDOM","render","document","getElementById"],"mappings":"6JAIMA,EAAc,CAClB,MAAQ,OACR,OAAS,OACT,gBAAmB,OACnB,OAAU,MACV,QAAW,OACX,eAAkB,SAClB,WAAc,SACd,SAAY,OACZ,MAAS,SAGLC,EAAa,CACjB,gBAAmB,OACnB,MAAS,QACT,WAAc,SACd,eAAkB,SAClB,QAAW,OACX,aAAgB,kCAChB,OAAU,kBAGNC,EAAiB,CACrB,QAAW,OACX,WAAc,SACd,cAAiB,UAGbC,EAAoB,CACxB,UAAa,MACb,aAAgB,MAChB,WAAc,OACd,SAAY,QAGRC,EAAc,CAClB,UAAa,OACb,aAAgB,OAChB,MAAS,OACT,OAAU,OACV,gBAAmB,UACnB,MAAS,QACT,SAAY,QAuBd,SAASC,EAAT,GAAoC,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QACrB,OACI,wBAAQC,MAAOR,EAAaO,QAASA,EAArC,SAA+CD,IAIvD,SAASG,EAAT,GAAiE,IAAhDC,EAA+C,EAA/CA,QAASH,EAAsC,EAAtCA,QAASI,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QACjD,OACE,sBAAKL,MAAON,EAAgBY,UAAU,YAAtC,UACE,qBAAKC,GAAG,aAAaD,UAAU,SAASN,MAAOL,EAA/C,SAAmEQ,EAAS,KAAO,iBAAmBE,EAAU,IAAM,OACtH,qBAAKE,GAAG,aAAaD,UAAU,SAASN,MAAOL,EAA/C,SAAmEQ,EAAS,WAAaA,EAAS,IAAM,4BACxG,wBAAQH,MAAOJ,EAAaG,QAAS,kBAAMK,EAASI,MAAM,GAAGC,KAAK,QAAlE,mBACA,qBAAKT,MAAOP,EAAZ,SACGS,EAAQQ,KAAI,SAACC,EAAQC,GACpB,OAAO,cAACf,EAAD,CAAgBC,MAAOa,EAAQZ,QAAS,kBAAMA,EAAQa,KAAzCA,WAOhC,SAASC,IAEP,MAA0BC,mBAASN,MAAM,GAAGC,KAAK,OAAjD,mBAAOM,EAAP,KAAcX,EAAd,KACA,EAA8BU,oBAAS,GAAvC,mBAAOT,EAAP,KAAgBW,EAAhB,KACMb,EA7CR,SAAyBD,GAWvB,IAVA,IAAMe,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAL,EAAI,EAAGA,EAAIK,EAAMC,OAAQN,IAAK,CACrC,kBAAkBK,EAAML,GAAxB,GAAOO,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAInB,EAAQiB,IAAMjB,EAAQiB,KAAOjB,EAAQkB,IAAMlB,EAAQiB,KAAOjB,EAAQmB,GACpE,OAAOnB,EAAQiB,GAGnB,OAAO,KA4BQG,CAAgBP,GAY7B,OACE,qBAAKT,UAAU,OAAf,SACE,qBAAKA,UAAU,aAAf,SACE,cAACL,EAAD,CAAOC,QAASa,EAAOhB,QAb/B,SAAqBa,GACnB,IAAMW,EAAS,YAAOR,GAElBZ,GAAUoB,EAAUX,KAExBW,EAAUX,GAAKP,EAAU,IAAM,IAC/BD,EAASmB,GACTP,GAAYX,KAMuCF,OAAQA,EAAQC,SAAUA,EAAUC,QAASA,QAMpGmB,IAASC,OACP,cAACZ,EAAD,IACAa,SAASC,eAAe,W","file":"static/js/main.80357d42.chunk.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst squareStyle = {\n  'width':'60px',\n  'height':'60px',\n  'backgroundColor': '#ddd',\n  'margin': '4px',\n  'display': 'flex',\n  'justifyContent': 'center',\n  'alignItems': 'center',\n  'fontSize': '20px',\n  'color': 'white'\n}\n\nconst boardStyle = {\n  'backgroundColor': '#eee',\n  'width': '208px',\n  'alignItems': 'center',\n  'justifyContent': 'center',\n  'display': 'grid',\n  'gridTemplate': 'repeat(3, 1fr) / repeat(3, 1fr)',\n  'border': '3px #eee solid'\n}\n\nconst containerStyle = {\n  'display': 'flex',\n  'alignItems': 'center',\n  'flexDirection': 'column'\n}\n\nconst instructionsStyle = {\n  'marginTop': '5px',\n  'marginBottom': '5px',\n  'fontWeight': 'bold',\n  'fontSize': '16px',\n}\n\nconst buttonStyle = {\n  'marginTop': '15px',\n  'marginBottom': '16px',\n  'width': '80px',\n  'height': '40px',\n  'backgroundColor': '#8acaca',\n  'color': 'white',\n  'fontSize': '16px',\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction Square({ value, onClick}) {\n    return (\n        <button style={squareStyle} onClick={onClick}>{value}</button>\n    );\n}\n\nfunction Board( {squares, onClick, winner, setBoard, xIsNext} ) {\n    return (\n      <div style={containerStyle} className=\"gameBoard\">\n        <div id=\"statusArea\" className=\"status\" style={instructionsStyle}>{winner ? null : \"Next player: \" + (xIsNext ? \"X\" : \"O\")}</div>\n        <div id=\"winnerArea\" className=\"winner\" style={instructionsStyle}>{winner ? \"Winner: \" + winner + \"!\" : \"Waiting for the winner!\"}</div>\n        <button style={buttonStyle} onClick={() => setBoard(Array(9).fill(null))}>Reset</button>\n        <div style={boardStyle}>\n          {squares.map((square, i) => {\n            return <Square key={i} value={square} onClick={() => onClick(i)}/>\n          })}\n        </div>\n      </div>\n    );\n}\n\nfunction Game() {\n\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const winner = calculateWinner(board);\n\n  function handleClick(i) {\n    const boardCopy = [...board];\n\n    if (winner || boardCopy[i]) return;\n\n    boardCopy[i] = xIsNext ? \"X\" : \"O\";\n    setBoard(boardCopy);\n    setXIsNext(!xIsNext);\n  }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={board} onClick={handleClick} winner={winner} setBoard={setBoard} xIsNext={xIsNext}/>\n        </div>\n      </div>\n    )\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}